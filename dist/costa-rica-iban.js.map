{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// @ts-ignore\nimport { version } from '../package.json';\nimport bankCollection from './bank-collection.json';\n\nconst bankCodes: string[] = bankCollection.map((b) => b.code);\n\nexport interface BankObject {\n  code: string;\n  entity: string;\n  category: string;\n  participation: string;\n  representative: string;\n};\n\nexport const NOT_STRING_ERROR = new Error('Type Error: expected string');\nexport const INVALID_IBAN_ERROR = new Error('Format Error: invalid Costa Rica IBAN format');\n\n// Since the browser version of the library cannot make use of types,\n// we added this helper to make sure the input is a string.\nconst errorIfNotString = (varToverify: any) => {\n  if (typeof varToverify !== 'string') {\n    throw NOT_STRING_ERROR;\n  }\n};\n\nexport const getCountryPrefixFromIBAN = (iban: string) => {\n  errorIfNotString(iban);\n\n  return iban.slice(0, 2);\n};\n\nexport const verifyIBANCountryPrefix = (iban: string) => {\n  errorIfNotString(iban);\n\n  return getCountryPrefixFromIBAN(iban) === 'CR';\n};\n\nexport const verifyIBANLength = (iban: string) => {\n  errorIfNotString(iban);\n\n  return iban.length === 22;\n};\n\nexport const verifyIBANFormat = (iban: string) => {\n  errorIfNotString(iban);\n\n  return (/^CR\\d\\d0(1|[3-8])\\d{16}$/).test(iban)\n    && bankCodes.indexOf(iban.slice(5, 8)) > -1;\n};\n\nconst errorOnInvalidIBAN = (iban: string) => {\n  if (!verifyIBANFormat(iban)) {\n    throw INVALID_IBAN_ERROR;\n  }\n};\n\nexport const getBankCodeFromIBAN = (iban: string) => {\n  errorOnInvalidIBAN(iban);\n\n  return iban.slice(5, 8);\n};\n\nexport const getBankObjectFromIBAN = (iban: string) => {\n  const bankCode = getBankCodeFromIBAN(iban);\n  const bankIndex = bankCodes.indexOf(bankCode);\n\n  return bankCollection[bankIndex] as BankObject;\n};\n\nexport const getBankNameFromIBAN = (iban: string, returnRepresentative = false) => {\n  const bankObject = getBankObjectFromIBAN(iban);\n\n  return (returnRepresentative && bankObject.participation === 'representada') ? (\n    bankObject.representative\n  ) : (\n    bankObject.entity\n  );\n};\n\nexport const getBankCategoryFromIBAN = (iban: string, returnRepresentative = false) => {\n  const bankObject = getBankObjectFromIBAN(iban);\n\n  return bankObject.category;\n};\n\nclass CostaRicaIBAN {\n  iban: string;\n\n  constructor(iban: string) {\n    errorOnInvalidIBAN(iban);\n\n    this.iban = iban;\n  }\n\n  getCountryPrefix() {\n    return getCountryPrefixFromIBAN(this.iban);\n  }\n\n  getBankCode() {\n    return getBankCodeFromIBAN(this.iban);\n  }\n\n  getBankObject() {\n    return getBankObjectFromIBAN(this.iban);\n  }\n\n  getBankName() {\n    return getBankNameFromIBAN(this.iban);\n  }\n\n  getBankCategory() {\n    return getBankCategoryFromIBAN(this.iban);\n  }\n\n  getVersion = () => version;\n}\n\nexport default CostaRicaIBAN;\n"],
  "mappingssB,wBAAe,IAAI,CAAC,MAAM,EAAE;AAUjD,MAAM,mBAAmB,IAAI,MAAM;AACnC,MAAM,qBAAqB,IAAI,MAAM;AAI5C,MAAM,mBAAmB,CAAC,gBAAqB;AAC7C,QAAI,OAAO,gBAAgB,UAAU;AACnC,YAAM;AAAA;AAAA;AAIH,MAAM,2BAA2B,CAAC,SAAiB;AACxD,qBAAiB;AAEjB,WAAO,KAAK,MAAM,GAAG;AAAA;AAGhB,MAAM,0BAA0B,CAAC,SAAiB;AACvD,qBAAiB;AAEjB,WAAO,yBAAyB,UAAU;AAAA;AAGrC,MAAM,mBAAmB,CAAC,SAAiB;AAChD,qBAAiB;AAEjB,WAAO,KAAK,WAAW;AAAA;AAGlB,MAAM,mBAAmB,CAAC,SAAiB;AAChD,qBAAiB;AAEjB,WAAQ,2BAA4B,KAAK,SACpC,UAAU,QAAQ,KAAK,MAAM,GAAG,MAAM;AAAA;AAG7C,MAAM,qBAAqB,CAAC,SAAiB;AAC3C,QAAI,CAAC,iBAAiB,OAAO;AAC3B,YAAM;AAAA;AAAA;AAIH,MAAM,sBAAsB,CAAC,SAAiB;AACnD,uBAAmB;AAEnB,WAAO,KAAK,MAAM,GAAG;AAAA;AAGhB,MAAM,wBAAwB,CAAC,SAAiB;AACrD,UAAM,WAAW,oBAAoB;AACrC,UAAM,YAAY,UAAU,QAAQ;AAEpC,WAAO,wBAAe;AAAA;AAGjB,MAAM,sBAAsB,CAAC,MAAc,uBAAuB,UAAU;AACjF,UAAM,aAAa,sBAAsB;AAEzC,WAAQ,wBAAwB,WAAW,kBAAkB,iBAC3D,WAAW,iBAEX,WAAW;AAAA;AAIR,MAAM,0BAA0B,CAAC,MAAc,uBAAuB,UAAU;AACrF,UAAM,aAAa,sBAAsB;AAEzC,WAAO,WAAW;AAAA;AAGpB,4BAAoB;AAAA,IAGlB,YAAY,MAAc;AA0B1B,wBAAa,MAAM;AAzBjB,yBAAmB;AAEnB,WAAK,OAAO;AAAA;AAAA,IAGd,mBAAmB;AACjB,aAAO,yBAAyB,KAAK;AAAA;AAAA,IAGvC,cAAc;AACZ,aAAO,oBAAoB,KAAK;AAAA;AAAA,IAGlC,gBAAgB;AACd,aAAO,sBAAsB,KAAK;AAAA;AAAA,IAGpC,cAAc;AACZ,aAAO,oBAAoB,KAAK;AAAA;AAAA,IAGlC,kBAAkB;AAChB,aAAO,wBAAwB,KAAK;AAAA;AAAA;AAMxC,MAAO,cAAQ;",
  "names": []
}
